{"version":3,"sources":["../../data-model/src/classes/traits/trait-collection/TraitCollection.ts","../../data-model/src/classes/traits/trait/AbstractBaseTrait.ts","../../data-model/src/classes/traits/trait/AbstractNumberTrait.ts","../../data-model/src/classes/traits/trait/NumberTrait.ts","../../data-model/src/classes/traits/trait/NumberTraitWithCategory.ts","../../data-model/src/classes/traits/trait/StringTrait.ts","../../data-model/src/classes/traits/TraitFactory.ts","../../data-model/src/constants.ts","../../data-model/src/utils/type-predicates/hasCleanUp.ts","../../data-model/src/classes/characterSheet/CharacterSheet.ts","../../data-model/src/index.ts","../../data-model/src/classes/traits/utils/categoryFunctions/getAttributeCategory.ts","../../data-model/src/classes/characterSheet/utils/characterSheetToData.ts","../../data-model/src/classes/characterSheet/utils/newCharacterSheetData.ts","../../data-model/src/classes/log/LogReporter.ts","../../data-model/src/classes/log/loggers/AbstractLogger.ts","../../data-model/src/classes/log/loggers/TraitLogger.ts","../../data-model/src/classes/log/utils/traitLoggerToString.ts","../../data-model/src/classes/log/utils/createChildTraitLogger.ts","../../data-model/src/classes/log/loggers/TraitCollectionLogger.ts","../../data-model/src/classes/log/utils/traitCollectionLoggerToString.ts","../../data-model/src/classes/log/loggers/CharacterSheetLogger.ts","../../data-model/src/classes/log/utils/characterSheetLoggerToString.ts","../../data-model/src/classes/log/utils/createChildTraitCollectionLogger.ts","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TraitCollection","instanceCreator","name","traitDataStorageInitialiser","traitCollectionDataStorageInitialiser","parentPath","logger","loggerCreator","dataStorage","log","path","this","initialData","size","cleanUp","toArray","map","e","data","delete","get","has","newValue","set","AbstractBaseTrait","value","defaultValueIfNotDefined","preProcessValue","newValRaw","newValueProcessed","newValueIsValid","hasCleanUp","AbstractNumberTrait","min","max","restProps","newVal","newValueRaw","Math","round","NumberTrait","NumberTraitWithCategory","categorySelector","category","StringTrait","props","TraitFactory","getAttributeCategory","initial","ATTRIBUTE_COLLECTION_NAME","newAttributeTrait","DISCIPLINE_COLLECTION_NAME","newDisciplineTrait","SKILL_COLLECTION_NAME","newSkillTrait","TOUCHSTONE_AND_CONVICTION_COLLECTION_NAME","newTouchStoneOrConvictionTrait","STRING_TRAIT_DEFAULT_VALUE","o","undefined","CharacterSheet","attributes","bloodPotency","clan","disciplines","health","humanity","hunger","id","sire","skills","touchstonesAndConvictions","willpower","dataStorageFactory","characterSheetDataStorage","getData","CharacterSheetLogger","sourceName","parentLogHandler","reporter","newTraitDataStorageInitialiser","characterSheet","newTraitCollectionDataStorageInitialiser","partialTraitFactoryProps","createChildTraitLogger","traitCollectionFactoryProps","createChildTraitCollectionLogger","newCoreNumberTrait","newCoreStringTrait","newAttributeTraitCollection","newSkillTraitCollection","newDisciplineTraitCollection","newTouchstonesAndConvictionTraitCollection","instances","total","successCount","failCount","Object","entries","propName","prop","console","warn","__filename","characterSheetToData","test","isValidId","Error","preExistingInstance","newCharacterSheetDataStorage","assertDataExistsOnDataStorage","error","newCharacterSheetData","Map","LogReporter","toString","describe","events","report","AbstractLogger","sourceType","event","push","TraitLogger","traitLoggerToString","existingChildLoggers","existingLogger","newLogger","TraitCollecitonLogger","childTraitLoggers","traitCollectionLoggerToString","traitLogReports","getChildTraitReports","Array","from","values","childTraitCollectionLoggers","characterSheetLoggerToString","allTraitCollectionTraitReports","getChildTraitCollectionReports","reduce","accumulatedReports","collectionReports","traitCollectionLogReports","TraitCollectionLogger","newDataObject","App","className","src","logo","alt","JSON","stringify","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d97db66.chunk.js","sourcesContent":["import { TraitNameUnionOrString, TraitValueTypeUnion } from '../../../declarations/types';\r\nimport { iTraitCollectionDataStorage } from '../../data-storage/interfaces/data-storage-interfaces';\r\nimport { iTraitCollectionLogReporter } from '../../log/interfaces/log-interfaces';\r\nimport { iTraitCollection } from '../interfaces/trait-collection-interfaces';\r\nimport { iBaseTrait, iBaseTraitData, iTraitCollectionProps } from '../interfaces/trait-interfaces';\r\n\r\nexport default class TraitCollection<\r\n\tN extends TraitNameUnionOrString,\r\n\tV extends TraitValueTypeUnion,\r\n\tD extends iBaseTraitData<N, V>,\r\n\tT extends iBaseTrait<N, V, D>\r\n> implements iTraitCollection<N, V, D, T> {\r\n\tprotected dataStorage: iTraitCollectionDataStorage<N, V, D, T>;\r\n\t// #typeName: TraitTypeNameUnion | string = 'Trait Collection'; // ? is this required\r\n\t/** Read only log reporter */\r\n\tlog: iTraitCollectionLogReporter;\r\n\tname: string;\r\n\tpath: string;\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tinstanceCreator,\r\n\t\t\tname,\r\n\t\t\ttraitDataStorageInitialiser,\r\n\t\t\ttraitCollectionDataStorageInitialiser,\r\n\t\t\tparentPath,\r\n\t\t\tloggerCreator: logger,\r\n\t\t}: iTraitCollectionProps<N, V, D, T>,\r\n\t\t...initialData: D[]\r\n\t) {\r\n\t\tthis.name = name;\r\n\r\n\t\tthis.dataStorage = traitCollectionDataStorageInitialiser({\r\n\t\t\tinstanceCreator,\r\n\t\t\tname,\r\n\t\t\tparentPath,\r\n\t\t\ttraitDataStorageInitialiser,\r\n\t\t\tinitialData,\r\n\t\t\t// onAdd: (props: iAddLogEventProps<V>) => this.logger.log(new AddLogEvent(props)), // todo delete?\r\n\t\t\t// onDelete: (props: iDeleteLogEventProps<V>) => this.logger.log(new DeleteLogEvent(props)),\r\n\t\t\tloggerCreator: logger,\r\n\t\t});\r\n\t\t// expose logger reporter\r\n\t\tthis.log = this.dataStorage.log;\r\n\r\n\t\tthis.path = this.dataStorage.path; // data storage defines path to use\r\n\t}\r\n\r\n\tget size(): number {\r\n\t\treturn this.dataStorage.size;\r\n\t}\r\n\r\n\tcleanUp(): boolean {\r\n\t\treturn this.dataStorage.cleanUp();\r\n\t}\r\n\r\n\tdata(): D[] {\r\n\t\treturn this.toArray().map(e => e.data());\r\n\t}\r\n\r\n\tdelete(name: N): iTraitCollection<N, V, D, T> {\r\n\t\tthis.dataStorage.delete(name);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget(name: N): T | void {\r\n\t\treturn this.dataStorage.get(name);\r\n\t}\r\n\r\n\thas(name: N): boolean {\r\n\t\treturn this.dataStorage.has(name);\r\n\t}\r\n\r\n\t/**\r\n\t * Update trait value if it exists, otherwise add a new one\r\n\t * @param name name of trait to edit or create\r\n\t * @param newValue value to assign\r\n\t */\r\n\tset(name: N, newValue: V): iTraitCollection<N, V, D, T> {\r\n\t\tthis.dataStorage.set(name, newValue);\r\n\t\treturn this;\r\n\t}\r\n\r\n\ttoArray(): T[] {\r\n\t\treturn this.dataStorage.toArray();\r\n\t}\r\n}\r\n","import { TraitNameUnionOrString, TraitValueTypeUnion } from '../../../declarations/types';\r\nimport hasCleanUp from '../../../utils/type-predicates/hasCleanUp';\r\nimport { iBaseTraitDataStorage } from '../../data-storage/interfaces/data-storage-interfaces';\r\nimport { iTraitLogReporter } from '../../log/interfaces/log-interfaces';\r\nimport {\r\n  iAbstractBaseTraitProps, iBaseTrait, iBaseTraitData\r\n} from '../interfaces/trait-interfaces';\r\n\r\nexport default abstract class AbstractBaseTrait<\r\n\tN extends TraitNameUnionOrString,\r\n\tV extends TraitValueTypeUnion,\r\n\tD extends iBaseTraitData<N, V>\r\n> implements iBaseTrait<N, V, D> {\r\n\tprotected dataStorage: iBaseTraitDataStorage<N, V>;\r\n\r\n\treadonly data: () => D;\r\n\treadonly log: iTraitLogReporter;\r\n\treadonly name: N;\r\n\treadonly path: string;\r\n\r\n\tprotected abstract newValueIsValid(newVal: V): boolean;\r\n\tprotected abstract preProcessValue(newValueRaw: V): V;\r\n\r\n\tconstructor({\r\n\t\tname,\r\n\t\tvalue,\r\n\t\ttraitDataStorageInitialiser,\r\n\t\tparentPath,\r\n\t\tloggerCreator,\r\n\t\tdata,\r\n\t}: iAbstractBaseTraitProps<N, V, D>) {\r\n\t\tthis.name = name;\r\n\r\n\t\t// initialise data store\r\n\t\tthis.dataStorage = traitDataStorageInitialiser({\r\n\t\t\tname,\r\n\t\t\tdefaultValueIfNotDefined: this.preProcessValue(value),\r\n\t\t\tparentPath,\r\n\t\t\tloggerCreator,\r\n\t\t});\r\n\r\n\t\tthis.log = this.dataStorage.log;\r\n\r\n\t\t// the data storage is responsible for providing a suitable path\r\n\t\tthis.path = this.dataStorage.path;\r\n\r\n\t\t// make sure toJson is provided\r\n\t\tthis.data = data;\r\n\t}\r\n\r\n\tpublic get value() {\r\n\t\treturn this.dataStorage.value;\r\n\t}\r\n\r\n\tpublic set value(newValRaw: V) {\r\n\t\t// todo delete? data storage should handle actually changing the value\r\n\t\t/*\r\n\r\n\t\t// justification should be done in newValueIsValid function\r\n\t\tif (!this.newValueIsValid(newValue)) return;\r\n\r\n\t\t// get current value as old value\r\n\t\tconst oldValue: V = this.dataStorage.value;\r\n\r\n\t\t// if old value is the same as new value do nothing\r\n\t\tif (oldValue === newValue) {\r\n\t\t\t// console.log(__filename, `Trait value was changed to the same value, nothing was done.`);\r\n\t\t\treturn;\r\n    }\r\n    */\r\n\r\n\t\tconst newValueProcessed = this.preProcessValue(newValRaw);\r\n\t\tif (!this.newValueIsValid(newValueProcessed)) return;\r\n\r\n\t\t// implement property change on data storage\r\n\t\tthis.dataStorage.value = newValueProcessed;\r\n\t}\r\n\r\n\tcleanUp(): boolean {\r\n\t\t// if the data storage has a cleanup function then call it and return the result,\r\n\t\t// otherwise return true if no cleanup required\r\n\t\treturn hasCleanUp(this.dataStorage) ? this.dataStorage.cleanUp() : true;\r\n\t}\r\n}\r\n","import { TraitNameUnionOrString } from '../../../declarations/types';\r\nimport {\r\n  iAbstractNumberTraitProps, iBaseNumberTrait, iNumberTraitData\r\n} from '../interfaces/trait-interfaces';\r\nimport AbstractBaseTrait from './AbstractBaseTrait';\r\n\r\n/** class with behaviour for traits that have number values */\r\nexport default abstract class AbstractNumberTrait<N extends TraitNameUnionOrString, D extends iNumberTraitData<N>>\r\n\textends AbstractBaseTrait<N, number, D>\r\n\timplements iBaseNumberTrait<N, D> {\r\n\tmax: number;\r\n\tmin: number;\r\n\r\n\tconstructor({ min = 0, max, value = min, ...restProps }: iAbstractNumberTraitProps<N, D>) {\r\n\t\tsuper({\r\n\t\t\t...restProps,\r\n\t\t\tvalue,\r\n\t\t});\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\t}\r\n\r\n\t/** Only allows setting numbers within the allowed range for this trait */\r\n\tnewValueIsValid(newVal: number): boolean {\r\n\t\t// ? is this required? delete\r\n\t\t/*\r\n\t\t// assert value is a number\r\n\t\tif (typeof newVal !== 'number')\r\n      throw Error( `Value for trait ${ this.name } should be a number, received a \"${ typeof newVal }` );\r\n    */\r\n\r\n\t\t// make sure number is within allowable range before change\r\n\t\tif (newVal < this.min) {\r\n\t\t\t// console.log(`Cannot set trait ${this.name} to ${newVal}, this is below the minimum allowed value of ${this.min}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (newVal > this.max) {\r\n\t\t\t// console.log(`Cannot set trait ${this.name} to ${newVal}, this is above the maximum allowed value of ${this.max}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpreProcessValue(newValueRaw: number): number {\r\n\t\t// number values to be rounded before being used\r\n\t\treturn Math.round(newValueRaw);\r\n\t}\r\n}\r\n","import { TraitNameUnionOrString } from '../../../declarations/types';\r\nimport { iNumberTrait, iNumberTraitData, iNumberTraitProps } from '../interfaces/trait-interfaces';\r\nimport AbstractNumberTrait from './AbstractNumberTrait';\r\n\r\n/** class with behaviour for traits that have number values */\r\nexport default class NumberTrait<N extends TraitNameUnionOrString>\r\n\textends AbstractNumberTrait<N, iNumberTraitData<N>>\r\n\timplements iNumberTrait<N> {\r\n\tconstructor({\r\n\t\tmin = 0,\r\n\t\tvalue = min,\r\n\r\n\t\t...restProps\r\n\t}: iNumberTraitProps<N>) {\r\n\t\tsuper({\r\n\t\t\t...restProps,\r\n      value, \r\n\t\t\tdata: () => ({ \r\n\t\t\t\tname: this.name,\r\n\t\t\t\tvalue: this.value,\r\n\t\t\t}),\r\n\t\t\tmin,\r\n\t\t});\r\n\t}\r\n}\r\n","import { TraitNameUnionOrString } from '../../../declarations/types';\r\nimport {\r\n  iNumberTraitData, iNumberTraitWithCategory, iNumberTraitWithCategoryProps\r\n} from '../interfaces/trait-interfaces';\r\nimport AbstractNumberTrait from './AbstractNumberTrait';\r\n\r\n/** class with behaviour for traits that have number values and categories */\r\nexport default class NumberTraitWithCategory<N extends TraitNameUnionOrString, C extends string>\r\n\textends AbstractNumberTrait<N, iNumberTraitData<N>>\r\n\timplements iNumberTraitWithCategory<N, C> {\r\n\tprotected categorySelector: (name: N) => C;\r\n\r\n\treadonly category: C;\r\n\r\n\tconstructor({ min = 0, value = min, categorySelector, ...restProps }: iNumberTraitWithCategoryProps<N, C>) {\r\n\t\tsuper({\r\n\t\t\t...restProps,\r\n\t\t\tvalue,\r\n\t\t\tmin,\r\n\t\t\t// NOTE a custom data function can be defined here, if trait data becomes different\r\n\t\t\tdata: () => ({\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tvalue: this.value,\r\n\t\t\t}),\r\n\t\t});\r\n\r\n\t\t// get the input categorySelector\r\n\t\tthis.categorySelector = categorySelector;\r\n\r\n\t\t// get category from name\r\n\t\tthis.category = this.categorySelector(this.name);\r\n\t}\r\n}\r\n","import { TraitNameUnionOrString } from '../../../declarations/types';\r\nimport {\r\n  iBaseStringTrait, iStringTraitData, iStringTraitProps\r\n} from '../interfaces/trait-interfaces';\r\nimport AbstractBaseTrait from './AbstractBaseTrait';\r\n\r\n/** class with behaviour for traits that have string values */\r\nexport default class StringTrait<N extends TraitNameUnionOrString, V extends string>\r\n\textends AbstractBaseTrait<N, V, iStringTraitData<N, V>>\r\n\timplements iBaseStringTrait<N, V> {\r\n\tconstructor(props: iStringTraitProps<N, V>) {\r\n\t\tsuper({\r\n\t\t\t...props,\r\n\t\t\tdata: () => ({\r\n\t\t\t\tname: this.name,\r\n\t\t\t\tvalue: this.value,\r\n\t\t\t}),\r\n\t\t});\r\n\t}\r\n\r\n\tprotected newValueIsValid(newVal: string): boolean {\r\n\t\t// only allows string types (empty strings also), which is handled by typescript\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprotected preProcessValue(newValueRaw: V): V {\r\n\t\t// no pre processing for string values\r\n\t\treturn newValueRaw;\r\n\t}\r\n}\r\n","import {\r\n  ATTRIBUTE_COLLECTION_NAME, DISCIPLINE_COLLECTION_NAME, SKILL_COLLECTION_NAME,\r\n  TOUCHSTONE_AND_CONVICTION_COLLECTION_NAME\r\n} from '../../constants';\r\nimport {\r\n  AttributeName, CoreNumberTraitName, CoreStringTraitName, DisciplineName, SkillName\r\n} from '../../declarations/types';\r\nimport {\r\n  iAttributeTraitCollection, iDisciplineTraitCollection, iSkillTraitCollection,\r\n  iTouchStoneOrConvictionCollection, iTraitCollectionFactoryMethodProps\r\n} from './interfaces/trait-collection-interfaces';\r\nimport {\r\n  iAttribute, iAttributeData, iBaseTraitProps, iDiscipline, iDisciplineData, iNumberTraitProps,\r\n  iSkill, iSkillData, iStringTraitProps, iTouchStoneOrConviction, iTouchStoneOrConvictionData\r\n} from './interfaces/trait-interfaces';\r\nimport TraitCollection from './trait-collection/TraitCollection';\r\nimport NumberTrait from './trait/NumberTrait';\r\nimport NumberTraitWithCategory from './trait/NumberTraitWithCategory';\r\nimport StringTrait from './trait/StringTrait';\r\nimport getAttributeCategory from './utils/categoryFunctions/getAttributeCategory';\r\n\r\nexport default abstract class TraitFactory {\r\n  static newAttributeTrait({\r\n\t\tvalue = 0,\r\n\t\t...restProps\r\n\t}: iBaseTraitProps<AttributeName, number, iAttributeData>): iAttribute {\r\n\t\treturn new NumberTraitWithCategory({ categorySelector: getAttributeCategory, ...restProps, value, min: 1, max: 5 });\r\n\t}\r\n\r\n  static newAttributeTraitCollection(\r\n\t\tprops: iTraitCollectionFactoryMethodProps,\r\n\t\t...initial: iAttributeData[]\r\n\t): iAttributeTraitCollection {\r\n\t\treturn new TraitCollection<AttributeName, number, iAttributeData, iAttribute>(\r\n\t\t\t{\r\n\t\t\t\t...props,\r\n\t\t\t\tname: ATTRIBUTE_COLLECTION_NAME,\r\n\t\t\t\tinstanceCreator: TraitFactory.newAttributeTrait,\r\n\t\t\t},\r\n\t\t\t...initial\r\n\t\t);\r\n\t}\r\n\r\n  static newCoreNumberTrait({ value = 0, min = 0, ...restProps }: iNumberTraitProps<CoreNumberTraitName>) {\r\n\t\treturn new NumberTrait({ ...restProps, value, min });\r\n\t}\r\n\r\n  static newCoreStringTrait<V extends string>(props: iStringTraitProps<CoreStringTraitName, V>) {\r\n\t\treturn new StringTrait(props);\r\n\t}\r\n\r\n  static newDisciplineTrait({\r\n\t\tvalue,\r\n\t\t...restProps\r\n\t}: iBaseTraitProps<DisciplineName, number, iDisciplineData>): iDiscipline {\r\n\t\treturn new NumberTrait({ ...restProps, value, min: 1, max: 5 });\r\n\t}\r\n\r\n  static newDisciplineTraitCollection(\r\n\t\tprops: iTraitCollectionFactoryMethodProps,\r\n\t\t...initial: iDisciplineData[]\r\n\t): iDisciplineTraitCollection {\r\n\t\treturn new TraitCollection<DisciplineName, number, iDisciplineData, iDiscipline>(\r\n\t\t\t{\r\n\t\t\t\t...props,\r\n\t\t\t\tname: DISCIPLINE_COLLECTION_NAME,\r\n\t\t\t\tinstanceCreator: TraitFactory.newDisciplineTrait,\r\n\t\t\t},\r\n\t\t\t...initial\r\n\t\t);\r\n\t}\r\n\r\n  static newSkillTrait({ value = 0, ...restProps }: iBaseTraitProps<SkillName, number, iSkillData>): iSkill {\r\n\t\treturn new NumberTrait({ ...restProps, min: 0, max: 5, value });\r\n\t}\r\n\r\n  static newSkillTraitCollection(\r\n\t\tprops: iTraitCollectionFactoryMethodProps,\r\n\t\t...initial: iSkillData[]\r\n\t): iSkillTraitCollection {\r\n\t\treturn new TraitCollection<SkillName, number, iSkillData, iSkill>(\r\n\t\t\t{\r\n\t\t\t\t...props,\r\n\t\t\t\tname: SKILL_COLLECTION_NAME,\r\n\t\t\t\tinstanceCreator: TraitFactory.newSkillTrait,\r\n\t\t\t},\r\n\t\t\t...initial\r\n\t\t);\r\n\t}\r\n\r\n  static newTouchStoneOrConvictionTrait({\r\n\t\tvalue,\r\n\t\t...restProps\r\n\t}: iBaseTraitProps<string, string, iTouchStoneOrConvictionData>): iTouchStoneOrConviction {\r\n\t\treturn new StringTrait({ ...restProps, value });\r\n\t}\r\n\r\n  static newTouchstonesAndConvictionTraitCollection(\r\n\t\tprops: iTraitCollectionFactoryMethodProps,\r\n\t\t...initial: iTouchStoneOrConvictionData[]\r\n\t): iTouchStoneOrConvictionCollection {\r\n\t\treturn new TraitCollection<string, string, iTouchStoneOrConvictionData, iTouchStoneOrConviction>(\r\n\t\t\t{\r\n\t\t\t\t...props,\r\n\t\t\t\tname: TOUCHSTONE_AND_CONVICTION_COLLECTION_NAME,\r\n\t\t\t\tinstanceCreator: TraitFactory.newTouchStoneOrConvictionTrait,\r\n\t\t\t},\r\n\t\t\t...initial\r\n\t\t);\r\n\t}\r\n}\r\n","// type unions\r\nexport const ATTRIBUTE_NAMES = [\r\n\t'Strength',\r\n\t'Dexterity',\r\n\t'Stamina',\r\n\t'Charisma',\r\n\t'Manipulation',\r\n\t'Composure',\r\n\t'Intelligence',\r\n\t'Wits',\r\n\t'Resolve',\r\n] as const;\r\n\r\nexport const SKILL_NAMES = [\r\n\t'Athletics',\r\n\t'Brawl',\r\n\t'Craft',\r\n\t'Drive',\r\n\t'Firearms',\r\n\t'Larceny',\r\n\t'Melee',\r\n\t'Stealth',\r\n\t'Survival',\r\n\t'Animal Ken',\r\n\t'Etiquette',\r\n\t'Insight',\r\n\t'Intimidation',\r\n\t'Leadership',\r\n\t'Performance',\r\n\t'Persuasion',\r\n\t'Streetwise',\r\n\t'Subterfuge',\r\n\t'Academics',\r\n\t'Awareness',\r\n\t'Finance',\r\n\t'Investigation',\r\n\t'Medicine',\r\n\t'Occult',\r\n\t'Politics',\r\n\t'Science',\r\n\t'Technology',\r\n] as const;\r\n\r\nexport const DISCIPLINE_NAMES = [\r\n\t'Animalism',\r\n\t'Auspex',\r\n\t'Prescence',\r\n\t'Blood Sorcery',\r\n\t'Celerity',\r\n\t'Chimerstry',\r\n\t'Dementation',\r\n\t'Dominate',\r\n\t'Fortitude',\r\n\t'Necromancy',\r\n\t'Obfuscate',\r\n\t'Oblivion',\r\n\t'Obtenebration',\r\n\t'Potence',\r\n\t'Protean',\r\n\t'Quietus',\r\n\t'Serpentis',\r\n\t'Thaumaturgy',\r\n\t'Thin-Blood Alchemy',\r\n\t'Vicissitude',\r\n] as const;\r\n\r\nexport const ATTRIBUTE_CATEGORIES = ['Physical', 'Social', 'Mental'] as const;\r\n\r\nexport const CORE_NUMBER_TRAITS = ['Health', 'Willpower', 'Hunger', 'Humanity', 'Blood Potency', 'Sire'] as const;\r\n\r\nexport const CORE_STRING_TRAITS = ['Name', 'Clan', 'Sire'] as const;\r\n\r\nexport const TRAIT_TYPES = ['Attribute', 'Skill', 'Discipline', 'Touchstone or Conviction', 'Core'] as const;\r\n\r\n// values\r\nexport const CORE_TRAIT_COLLECTION_NAME = `CoreTraits`;\r\nexport const ATTRIBUTE_COLLECTION_NAME = `Attributes`;\r\nexport const SKILL_COLLECTION_NAME = `Skills`;\r\nexport const DISCIPLINE_COLLECTION_NAME = `Disciplines`;\r\nexport const TOUCHSTONE_AND_CONVICTION_COLLECTION_NAME = `TouchstonesAndConvictions`;\r\nexport const STRING_TRAIT_DEFAULT_VALUE = ''\r\n","import { iHasCleanUp } from '../../declarations/interfaces';\r\n\r\nexport default function hasCleanUp(o: any): o is iHasCleanUp {\r\n\treturn typeof o === 'object' && (o as iHasCleanUp).cleanUp !== undefined;\r\n}\r\n","// import saveCharacterSheetToFile from '../utils/saveCharacterSheetToFile';\r\nimport { STRING_TRAIT_DEFAULT_VALUE } from '../../constants';\r\nimport { ClanName } from '../../declarations/types';\r\nimport hasCleanUp from '../../utils/type-predicates/hasCleanUp';\r\nimport { iHasId } from '../data-storage/interfaces/data-storage-interfaces';\r\nimport {\r\n  iCharacterSheetLogger, iCharacterSheetLogReporter, iChildLoggerCreatorProps\r\n} from '../log/interfaces/log-interfaces';\r\nimport CharacterSheetLogger from '../log/loggers/CharacterSheetLogger';\r\nimport {\r\n  iAttributeTraitCollection, iDisciplineTraitCollection, iSkillTraitCollection,\r\n  iTouchStoneOrConvictionCollection, iTraitCollectionFactoryMethodProps\r\n} from '../traits/interfaces/trait-collection-interfaces';\r\nimport {\r\n  iCoreNumberTrait, iCoreStringTrait, iGeneralTrait\r\n} from '../traits/interfaces/trait-interfaces';\r\nimport TraitFactory from '../traits/TraitFactory';\r\nimport {\r\n  iCharacterSheet, iCharacterSheetData, iCharacterSheetLoaderProps, iCharacterSheetProps,\r\n  iCharacterSheetShape\r\n} from './interfaces/character-sheet-interfaces';\r\nimport characterSheetToData from './utils/characterSheetToData';\r\nimport newCharacterSheetData from './utils/newCharacterSheetData';\r\n\r\n// todo split this into smaller pieces\r\n\r\n// todo add a method to clean up when a character sheet is not in use anymore, ie detach all event listeners to data storage etc\r\n\r\nexport default class CharacterSheet implements iCharacterSheet {\r\n\t/** Existing singleton-ish instances of this class */\r\n\tprotected static instances: Map<string, CharacterSheet> = new Map<string, CharacterSheet>();\r\n\r\n\t/** Internal logger */\r\n\tprotected logger: iCharacterSheetLogger;\r\n\r\n\t//-------------------------------------\r\n\t// NON BASIC PRIMITIVE VARIABLES\r\n\treadonly attributes: iAttributeTraitCollection;\r\n\treadonly bloodPotency: iCoreNumberTrait;\r\n\treadonly clan: iCoreStringTrait<ClanName>;\r\n\treadonly disciplines: iDisciplineTraitCollection;\r\n\treadonly health: iCoreNumberTrait;\r\n\treadonly humanity: iCoreNumberTrait;\r\n\treadonly hunger: iCoreNumberTrait;\r\n\treadonly id: string;\r\n\treadonly name: iCoreStringTrait<string>;\r\n\treadonly sire: iCoreStringTrait<string>;\r\n\treadonly skills: iSkillTraitCollection;\r\n\treadonly touchstonesAndConvictions: iTouchStoneOrConvictionCollection;\r\n\treadonly willpower: iCoreNumberTrait;\r\n\r\n\tlog: iCharacterSheetLogReporter;\r\n\tpath: string;\r\n\r\n\t//-------------------------------------\r\n\t// PRIVATE CONSTRUCTOR FOR SINGLETONS\r\n\tprivate constructor(props: iCharacterSheetProps) {\r\n\t\tconst { id, dataStorageFactory, parentPath, characterSheetDataStorage } = props;\r\n\r\n\t\tthis.id = id;\r\n\t\tthis.path = characterSheetDataStorage.path; // note data storage decides path\r\n\r\n\t\t// get initial data from data storage\r\n\t\tconst initialData = characterSheetDataStorage.getData();\r\n\r\n\t\t// initialise new top level character sheet logger\r\n\t\tthis.logger = new CharacterSheetLogger({ sourceName: this.path, parentLogHandler: null });\r\n\r\n\t\t// expose logger reporter\r\n\t\tthis.log = this.logger.reporter;\r\n\r\n\t\t// create data storage initialisers\r\n\t\tconst traitDataStorageInitialiser = dataStorageFactory.newTraitDataStorageInitialiser({\r\n\t\t\tcharacterSheet: this,\r\n\t\t});\r\n\r\n\t\tconst traitCollectionDataStorageInitialiser = dataStorageFactory.newTraitCollectionDataStorageInitialiser({\r\n\t\t\tcharacterSheet: this,\r\n\t\t});\r\n\r\n\t\t// create core trait logger initialiser function\r\n\t\tconst traitLoggerCreator = (props: iChildLoggerCreatorProps) => this.logger.createChildTraitLogger(props);\r\n\r\n\t\tconst traitCollectionLoggerCreator = (props: iChildLoggerCreatorProps) =>\r\n\t\t\tthis.logger.createChildTraitCollectionLogger(props);\r\n\r\n\t\t// create partial trait factory method props\r\n\t\tconst partialTraitFactoryProps = {\r\n\t\t\ttraitDataStorageInitialiser,\r\n\t\t\tparentPath: this.path,\r\n\t\t\tloggerCreator: traitLoggerCreator,\r\n\t\t};\r\n\r\n\t\t// create traitCollection factory method props\r\n\t\tconst traitCollectionFactoryProps: iTraitCollectionFactoryMethodProps = {\r\n\t\t\ttraitCollectionDataStorageInitialiser,\r\n\t\t\ttraitDataStorageInitialiser,\r\n\t\t\tparentPath: this.path,\r\n\t\t\tloggerCreator: traitCollectionLoggerCreator,\r\n\t\t};\r\n\r\n\t\t// core number traits\r\n\t\tthis.bloodPotency = TraitFactory.newCoreNumberTrait({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tmax: 10,\r\n\t\t\tname: 'Blood Potency',\r\n\t\t\tvalue: initialData.bloodPotency.value || 0,\r\n\t\t});\r\n\r\n\t\tthis.hunger = TraitFactory.newCoreNumberTrait({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tmax: 5,\r\n\t\t\tname: 'Hunger',\r\n\t\t\tvalue: initialData.hunger.value || 0,\r\n\t\t});\r\n\r\n\t\tthis.humanity = TraitFactory.newCoreNumberTrait({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tmax: 10,\r\n\t\t\tname: 'Humanity',\r\n\t\t\tvalue: initialData.humanity.value || 0,\r\n\t\t});\r\n\r\n\t\tthis.health = TraitFactory.newCoreNumberTrait({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tmax: 10,\r\n\t\t\tname: 'Health',\r\n\t\t\tvalue: initialData.health.value || 0,\r\n\t\t});\r\n\r\n\t\tthis.willpower = TraitFactory.newCoreNumberTrait({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tmax: 10,\r\n\t\t\tname: 'Willpower',\r\n\t\t\tvalue: initialData.willpower.value || 0,\r\n\t\t});\r\n\r\n\t\t// core string traits\r\n\t\tthis.name = TraitFactory.newCoreStringTrait<string>({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tname: 'Name',\r\n\t\t\tvalue: initialData.name.value || STRING_TRAIT_DEFAULT_VALUE,\r\n\t\t});\r\n\r\n\t\tthis.sire = TraitFactory.newCoreStringTrait<string>({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tname: 'Sire',\r\n\t\t\tvalue: initialData.sire.value || STRING_TRAIT_DEFAULT_VALUE,\r\n\t\t});\r\n\r\n\t\tthis.clan = TraitFactory.newCoreStringTrait<ClanName>({\r\n\t\t\t...partialTraitFactoryProps,\r\n\t\t\tname: 'Clan',\r\n\t\t\tvalue: initialData.clan.value || STRING_TRAIT_DEFAULT_VALUE,\r\n\t\t});\r\n\r\n\t\t// create collections, with initial data where available\r\n\t\tthis.attributes = TraitFactory.newAttributeTraitCollection(traitCollectionFactoryProps, ...initialData.attributes);\r\n\r\n\t\tthis.skills = TraitFactory.newSkillTraitCollection(traitCollectionFactoryProps, ...initialData.skills);\r\n\r\n\t\tthis.disciplines = TraitFactory.newDisciplineTraitCollection(\r\n\t\t\ttraitCollectionFactoryProps,\r\n\t\t\t...initialData.disciplines\r\n\t\t);\r\n\r\n\t\tthis.touchstonesAndConvictions = TraitFactory.newTouchstonesAndConvictionTraitCollection(\r\n\t\t\ttraitCollectionFactoryProps,\r\n\t\t\t...initialData.touchstonesAndConvictions\r\n\t\t);\r\n\r\n\t\t// record this instance using id and path as keys\r\n\t\tCharacterSheet.instances.set(this.id, this);\r\n\t\tCharacterSheet.instances.set(this.path, this);\r\n\t}\r\n\r\n\t// SINGLETON CONSTRUCTOR\r\n\tstatic async load(props: iCharacterSheetLoaderProps): Promise<CharacterSheet> {\r\n\t\tconst { dataStorageFactory, id } = props;\r\n\r\n\t\t// ? should data storage decide what is a valid id?\r\n\t\tconst isValidId = (id: string): boolean => {\r\n\t\t\t// id should only contain alpha numeric characters\r\n\t\t\treturn !/\\W\\-/.test(id);\r\n\t\t};\r\n\r\n\t\tif (!isValidId(id)) {\r\n\t\t\tthrow Error(\r\n\t\t\t\t`Id \"${id}\" is not a valid character sheet id. This should only contain alpha numeric characters, underscores, or dashes.`\r\n\t\t\t);\r\n\t\t\t// return;\r\n\t\t}\r\n\r\n\t\tconst preExistingInstance = CharacterSheet.instances.get(id);\r\n\r\n\t\t// if an instance has already been created with this id then use that instance\r\n\t\tif (preExistingInstance) return preExistingInstance;\r\n\r\n\t\t// check if a character sheet with this id doesnt exist in the data storage, initialise a blank character sheet if not\r\n\t\tconst characterSheetDataStorage = dataStorageFactory.newCharacterSheetDataStorage(props);\r\n\r\n\t\ttry {\r\n\t\t\t// makes sure some data exists for the character sheet instance to link to\r\n\t\t\tawait characterSheetDataStorage.assertDataExistsOnDataStorage();\r\n\r\n\t\t\t// return a new character sheet instance as requested\r\n\t\t\t// Note a character sheet instance only creates an object that is connected to a character sheet on the data source, it doesnt initialise a new character sheet on the data source\r\n\t\t\treturn new CharacterSheet({ ...props, characterSheetDataStorage });\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(__filename, { error });\r\n\t\t\tthrow Error(`Could not create character sheet instance with id \"${id}\", Message: ${error}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/** Returns a new iCharacterSheetData object with default values */\r\n\tstatic newDataObject(props: iHasId): iCharacterSheetData {\r\n\t\treturn newCharacterSheetData(props);\r\n\t}\r\n\r\n\tcleanUp(): boolean {\r\n\t\tconst coreTraits: iCharacterSheetShape = {\r\n\t\t\tattributes: this.attributes,\r\n\t\t\tbloodPotency: this.bloodPotency,\r\n\t\t\tclan: this.clan,\r\n\t\t\tdisciplines: this.disciplines,\r\n\t\t\thealth: this.health,\r\n\t\t\thumanity: this.humanity,\r\n\t\t\thunger: this.hunger,\r\n\t\t\tid: this.id,\r\n\t\t\tname: this.name,\r\n\t\t\tsire: this.sire,\r\n\t\t\tskills: this.skills,\r\n\t\t\ttouchstonesAndConvictions: this.touchstonesAndConvictions,\r\n\t\t\twillpower: this.willpower,\r\n\t\t};\r\n\r\n\t\tlet total = 0;\r\n\t\tlet successCount = 0;\r\n\t\tlet failCount = 0;\r\n\r\n\t\t// clean any cleanable properties\r\n\t\tfor (let [propName, prop] of Object.entries(this)) {\r\n\t\t\tif (hasCleanUp(prop)) {\r\n\t\t\t\ttotal++;\r\n\t\t\t\tif (prop.cleanUp()) {\r\n\t\t\t\t\tsuccessCount++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.warn(__filename, `There was an issue cleaning up ${propName}`);\r\n\t\t\t\t\tfailCount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if there are failures\r\n\t\tif (!!failCount)\r\n\t\t\tconsole.warn(\r\n\t\t\t\t__filename,\r\n\t\t\t\t`Cleaned ${successCount} / ${total} items Successfully, but ${failCount} / ${total} were unsuccessful`\r\n\t\t\t);\r\n\r\n\t\t// successful if no failures\r\n\t\treturn !failCount;\r\n\t}\r\n\r\n\tpublic data(): iCharacterSheetData {\r\n\t\treturn characterSheetToData(this);\r\n\t}\r\n\r\n\t// ? should this be public?\r\n\tprivate getAllTraits(): iGeneralTrait[] {\r\n\t\t// todo make this automatic and dynamic\r\n\t\treturn [\r\n\t\t\t...this.attributes.toArray(),\r\n\t\t\t...this.disciplines.toArray(),\r\n\t\t\t...this.skills.toArray(),\r\n\t\t\t...this.touchstonesAndConvictions.toArray(),\r\n\t\t\tthis.bloodPotency,\r\n\t\t\tthis.clan,\r\n\t\t\tthis.health,\r\n\t\t\tthis.humanity,\r\n\t\t\tthis.hunger,\r\n\t\t\tthis.name,\r\n\t\t\tthis.sire,\r\n\t\t\tthis.willpower,\r\n\t\t];\r\n\t}\r\n}\r\n","import CharacterSheet from './classes/characterSheet/CharacterSheet';\r\n\r\nconsole.warn(__filename, 'init');\r\n\r\nexport { CharacterSheet };\r\n","import { AttributeCategory, AttributeName } from '../../../../declarations/types';\r\n\r\nexport default function getAttributeCategory(name: AttributeName): AttributeCategory {\r\n\tswitch (name) {\r\n\t\tcase 'Strength':\r\n\t\tcase 'Dexterity':\r\n\t\tcase 'Stamina':\r\n\t\t\treturn 'Physical';\r\n\t\tcase 'Charisma':\r\n\t\tcase 'Manipulation':\r\n\t\tcase 'Composure':\r\n\t\t\treturn 'Social';\r\n\t\tcase 'Intelligence':\r\n\t\tcase 'Wits':\r\n\t\tcase 'Resolve':\r\n\t\t\treturn 'Mental';\r\n\t\tdefault:\r\n\t\t\tthrow Error(`${__filename} ERROR: Unknown attribute name \"${name}\"`);\r\n\t}\r\n}\r\n","import { iCharacterSheet, iCharacterSheetData } from '../interfaces/character-sheet-interfaces';\r\n\r\nexport default function characterSheetToData( characterSheet: iCharacterSheet ): iCharacterSheetData {\r\n  \tconst data: iCharacterSheetData = {\r\n\t\t\tid: characterSheet.id,\r\n\r\n\t\t\t// trait collections\r\n\t\t\tattributes: characterSheet.attributes.data(),\r\n\t\t\tdisciplines: characterSheet.disciplines.data(),\r\n\t\t\tskills: characterSheet.skills.data(),\r\n\t\t\ttouchstonesAndConvictions: characterSheet.touchstonesAndConvictions.data(),\r\n\r\n\t\t\t// core string traits\r\n\t\t\tclan: characterSheet.clan.data(),\r\n\t\t\tname: characterSheet.name.data(),\r\n\t\t\tsire: characterSheet.sire.data(),\r\n\r\n\t\t\t// core number traits\r\n\t\t\thealth: characterSheet.health.data(),\r\n\t\t\thumanity: characterSheet.humanity.data(),\r\n\t\t\thunger: characterSheet.hunger.data(),\r\n\t\t\tbloodPotency: characterSheet.bloodPotency.data(),\r\n\t\t\twillpower: characterSheet.willpower.data(),\r\n\t\t};\r\n\t\t// console.log(__filename, { data });\r\n\t\treturn data;\r\n}\r\n","import { STRING_TRAIT_DEFAULT_VALUE } from '../../../constants';\r\nimport { iHasId } from '../../data-storage/interfaces/data-storage-interfaces';\r\nimport { iCharacterSheetData } from '../interfaces/character-sheet-interfaces';\r\n\r\nexport default function newCharacterSheetData({ id }: iHasId): iCharacterSheetData {\r\n\treturn {\r\n\t\tid,\r\n\t\tbloodPotency: { name: 'Blood Potency', value: 0 },\r\n\t\thealth: { name: 'Health', value: 0 },\r\n\t\thumanity: { name: 'Humanity', value: 0 },\r\n\t\thunger: { name: 'Hunger', value: 0 },\r\n\t\twillpower: { name: 'Willpower', value: 0 },\r\n\t\tname: { name: 'Name', value: STRING_TRAIT_DEFAULT_VALUE },\r\n\t\tsire: { name: 'Sire', value: STRING_TRAIT_DEFAULT_VALUE },\r\n\t\tclan: { name: 'Clan', value: STRING_TRAIT_DEFAULT_VALUE },\r\n\t\tattributes: [],\r\n\t\tdisciplines: [],\r\n\t\tskills: [],\r\n\t\ttouchstonesAndConvictions: [],\r\n\t};\r\n}\r\n","import {\r\n  iBaseLogger, iBaseLogReporter, iBaseLogReporterProps, iLogEvent\r\n} from './interfaces/log-interfaces';\r\nimport { iBaseLogReport } from './interfaces/logReportInterfaces';\r\n\r\nexport default class LogReporter<R extends iBaseLogReport> implements iBaseLogReporter<R> {\r\n\tprotected logger: iBaseLogger<R>;\r\n\r\n\tdescribe: () => string;\r\n\r\n\tconstructor({ logger, describe: toString }: iBaseLogReporterProps<R>) {\r\n\t\tthis.logger = logger;\r\n\t\tthis.describe = toString;\r\n\t}\r\n\r\n\tget events(): iLogEvent[] {\r\n\t\treturn [...this.logger.events];\r\n\t}\r\n\r\n\tget report(): R {\r\n\t\treturn this.logger.report;\r\n\t}\r\n}\r\n","import { LogSourceTypeNameUnion } from '../../../declarations/types';\r\nimport {\r\n  iBaseLogger, iBaseLoggerProps, iBaseLogReporter, iLogEvent\r\n} from '../interfaces/log-interfaces';\r\nimport { iBaseLogReport } from '../interfaces/logReportInterfaces';\r\n\r\nexport default abstract class AbstractLogger<L extends iBaseLogReport> implements iBaseLogger<L> {\r\n\tprotected parentLogHandler: ((event: iLogEvent) => void) | null;\r\n\tprotected sourceName: string;\r\n\r\n\treadonly events: iLogEvent[] = [];\r\n\tabstract readonly reporter: iBaseLogReporter<L>;\r\n\tabstract readonly sourceType: LogSourceTypeNameUnion;\r\n\r\n\tabstract get report(): L;\r\n\r\n\tconstructor({ sourceName, parentLogHandler }: iBaseLoggerProps) {\r\n\t\tthis.sourceName = sourceName;\r\n\t\tthis.parentLogHandler = parentLogHandler;\r\n\t}\r\n\r\n\tgetLogEvents(): iLogEvent[] {\r\n\t\treturn [...this.events];\r\n\t}\r\n\r\n\tlog(event: iLogEvent): void {\r\n\t\tthis.events.push(event);\r\n\r\n\t\t// emit log to parent, if handler provided\r\n\t\tif (this.parentLogHandler) this.parentLogHandler(event);\r\n\t}\r\n}\r\n","import { LogSourceTypeNameUnion } from '../../../declarations/types';\r\nimport { iBaseLoggerProps, iBaseLogReporter, iTraitLogger } from '../interfaces/log-interfaces';\r\nimport { iTraitLogReport } from '../interfaces/logReportInterfaces';\r\nimport LogReporter from '../LogReporter';\r\nimport traitLoggerToString from '../utils/traitLoggerToString';\r\nimport AbstractLogger from './AbstractLogger';\r\n\r\nexport default class TraitLogger extends AbstractLogger<iTraitLogReport> implements iTraitLogger {\r\n  readonly reporter: iBaseLogReporter<iTraitLogReport>;\r\n\r\n  sourceType: LogSourceTypeNameUnion = 'Trait';\r\n\r\n  constructor(props: iBaseLoggerProps) {\r\n\t\tsuper(props);\r\n\t\tconst toString = () => traitLoggerToString(this);\r\n\t\tthis.reporter = new LogReporter({ logger: this, describe: toString });\r\n\t}\r\n\r\n  get report(): iTraitLogReport {\r\n\t\treturn {\r\n\t\t\tevents: [...this.events],\r\n\t\t\tsourceName: this.sourceName,\r\n\t\t\tsourceType: this.sourceType,\r\n\t\t};\r\n\t}\r\n}\r\n","import { iTraitLogger } from '../interfaces/log-interfaces';\r\n\r\n// todo implement?\r\nexport default function traitLoggerToString(logger: iTraitLogger): string {\r\n\tthrow Error('Not implemented');\r\n}\r\n","import { iLogEvent, iTraitLogger } from '../interfaces/log-interfaces';\r\nimport TraitLogger from '../loggers/TraitLogger';\r\n\r\nexport default function createChildTraitLogger(\r\n\tsourceName: string,\r\n\texistingChildLoggers: Map<string, iTraitLogger>,\r\n\tparentLogHandler: (event: iLogEvent) => void\r\n): iTraitLogger {\r\n\t// if a logger already exists return it\r\n\tconst existingLogger = existingChildLoggers.get(sourceName);\r\n\tif (existingLogger) return existingLogger;\r\n\r\n\t// create a new logger\r\n\tconst newLogger = new TraitLogger({ sourceName, parentLogHandler });\r\n\r\n\t// add new logger to existing loggers\r\n\texistingChildLoggers.set(sourceName, newLogger);\r\n\r\n\treturn newLogger;\r\n}\r\n","import { LogSourceTypeNameUnion } from '../../../declarations/types';\r\nimport {\r\n  iBaseLoggerProps, iBaseLogReporter, iChildLoggerCreatorProps, iLogEvent, iTraitCollectionLogger,\r\n  iTraitLogger\r\n} from '../interfaces/log-interfaces';\r\nimport { iTraitCollectionLogReport, iTraitLogReport } from '../interfaces/logReportInterfaces';\r\nimport LogReporter from '../LogReporter';\r\nimport createChildTraitLogger from '../utils/createChildTraitLogger';\r\nimport traitCollectionLoggerToString from '../utils/traitCollectionLoggerToString';\r\nimport AbstractLogger from './AbstractLogger';\r\n\r\nexport default class TraitCollecitonLogger\r\n\textends AbstractLogger<iTraitCollectionLogReport>\r\n\timplements iTraitCollectionLogger {\r\n\tprotected childTraitLoggers = new Map<string, iTraitLogger>();\r\n\r\n\treadonly reporter: iBaseLogReporter<iTraitCollectionLogReport>;\r\n\r\n\tsourceType: LogSourceTypeNameUnion = 'Trait Collection';\r\n\r\n\tconstructor(props: iBaseLoggerProps) {\r\n\t\tsuper(props);\r\n\t\tconst toString = () => traitCollectionLoggerToString(this);\r\n\t\tthis.reporter = new LogReporter({ logger: this, describe: toString });\r\n\t}\r\n\r\n\tget report(): iTraitCollectionLogReport {\r\n\t\treturn {\r\n\t\t\tevents: [...this.events],\r\n\t\t\tsourceName: this.sourceName,\r\n\t\t\tsourceType: this.sourceType,\r\n\t\t\ttraitLogReports: this.getChildTraitReports(),\r\n\t\t};\r\n\t}\r\n\r\n\tcreateChildTraitLogger({ sourceName }: iChildLoggerCreatorProps): iTraitLogger {\r\n\t\treturn createChildTraitLogger(sourceName, this.childTraitLoggers, (event: iLogEvent) => this.log(event));\r\n\t}\r\n\r\n\tprotected getChildTraitReports(): iTraitLogReport[] {\r\n\t\treturn Array.from(this.childTraitLoggers.values()).map(logger => logger.report);\r\n\t}\r\n}\r\n","import { iTraitCollectionLogger } from '../interfaces/log-interfaces';\r\n\r\nexport default function traitCollectionLoggerToString(logger: iTraitCollectionLogger): string {\r\n\tthrow Error('Not implemented');\r\n}\r\n"," \r\nimport { LogSourceTypeNameUnion } from '../../../declarations/types';\r\nimport {\r\n  iBaseLoggerProps, iBaseLogReporter, iCharacterSheetLogger, iChildLoggerCreatorProps, iLogEvent,\r\n  iTraitCollectionLogger, iTraitLogger\r\n} from '../interfaces/log-interfaces';\r\nimport {\r\n  iCharacterSheetLogReport, iTraitCollectionLogReport, iTraitLogReport\r\n} from '../interfaces/logReportInterfaces';\r\nimport LogReporter from '../LogReporter';\r\nimport characterSheetLoggerToString from '../utils/characterSheetLoggerToString';\r\nimport createChildTraitCollectionLogger from '../utils/createChildTraitCollectionLogger';\r\nimport createChildTraitLogger from '../utils/createChildTraitLogger';\r\nimport AbstractLogger from './AbstractLogger';\r\n\r\n// todo test\r\nexport default class CharacterSheetLogger\r\n\textends AbstractLogger<iCharacterSheetLogReport>\r\n\timplements iCharacterSheetLogger {\r\n\tprotected childTraitCollectionLoggers = new Map<string, iTraitCollectionLogger>();\r\n\tprotected childTraitLoggers = new Map<string, iTraitLogger>();\r\n\r\n\treadonly reporter: iBaseLogReporter<iCharacterSheetLogReport>;\r\n\r\n\tsourceType: LogSourceTypeNameUnion = 'Character Sheet';\r\n\r\n\tconstructor(props: iBaseLoggerProps) {\r\n\t\tsuper(props);\r\n\t\tconst toString = () => characterSheetLoggerToString(this);\r\n\t\tthis.reporter = new LogReporter({ logger: this, describe: toString });\r\n\t}\r\n\r\n\tget report(): iCharacterSheetLogReport {\r\n\t\tconst allTraitCollectionTraitReports: iTraitLogReport[] = this.getChildTraitCollectionReports().reduce(\r\n\t\t\t(accumulatedReports, collectionReports) => [...accumulatedReports, ...collectionReports.traitLogReports],\r\n\t\t\t[] as iTraitLogReport[]\r\n\t\t);\r\n\r\n\t\treturn {\r\n\t\t\tsourceName: this.sourceName,\r\n\t\t\tsourceType: this.sourceType,\r\n\t\t\tevents: [...this.events],\r\n\t\t\ttraitLogReports: [...this.getChildTraitReports(), ...allTraitCollectionTraitReports],\r\n\t\t\ttraitCollectionLogReports: this.getChildTraitCollectionReports(),\r\n\t\t};\r\n\t}\r\n\r\n\tcreateChildTraitCollectionLogger({ sourceName }: iChildLoggerCreatorProps): iTraitCollectionLogger {\r\n\t\treturn createChildTraitCollectionLogger(sourceName, this.childTraitCollectionLoggers, (event: iLogEvent) =>\r\n\t\t\tthis.log(event)\r\n\t\t);\r\n\t}\r\n\r\n\tcreateChildTraitLogger({ sourceName }: iChildLoggerCreatorProps): iTraitLogger {\r\n\t\treturn createChildTraitLogger(sourceName, this.childTraitLoggers, (event: iLogEvent) => this.log(event));\r\n\t}\r\n\r\n\tprotected getChildTraitCollectionReports(): iTraitCollectionLogReport[] {\r\n\t\treturn Array.from(this.childTraitCollectionLoggers.values()).map(logger => logger.report);\r\n\t}\r\n\r\n\tprotected getChildTraitReports(): iTraitLogReport[] {\r\n\t\treturn Array.from(this.childTraitLoggers.values()).map(logger => logger.report);\r\n\t}\r\n}\r\n","import { iCharacterSheetLogger } from '../interfaces/log-interfaces';\r\n\r\nexport default function characterSheetLoggerToString(logger: iCharacterSheetLogger): string {\r\n\tthrow Error('Not implemented');\r\n}\r\n","import { iLogEvent, iTraitCollectionLogger } from '../interfaces/log-interfaces';\r\nimport TraitCollectionLogger from '../loggers/TraitCollectionLogger';\r\n\r\nexport default function createChildTraitCollectionLogger(\r\n\tsourceName: string,\r\n\texistingChildLoggers: Map<string, iTraitCollectionLogger>,\r\n\tparentLogHandler: (event: iLogEvent) => void\r\n): iTraitCollectionLogger {\r\n\t// if a logger already exists return it\r\n\tconst existingLogger = existingChildLoggers.get(sourceName);\r\n\tif (existingLogger) return existingLogger;\r\n\r\n\t// create a new logger\r\n\tconst newLogger = new TraitCollectionLogger({ sourceName, parentLogHandler });\r\n\r\n\t// add new logger to existing loggers\r\n\texistingChildLoggers.set(sourceName, newLogger);\r\n\r\n\treturn newLogger;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './App.css';\r\n\r\nimport { CharacterSheet } from '@quirk-a-bot/data-model';\r\n\r\nimport logo from './logo.svg';\r\n\r\nconst data = CharacterSheet.newDataObject({ id: '' });\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<p>\r\n\t\t\t\t\tEdit <code>src/App.js</code> and save to reload.\r\n\t\t\t\t</p>\r\n\t\t\t\t<p>Charactersheet data: {JSON.stringify(data)}</p>\r\n\t\t\t\t<a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n\t\t\t\t\tLearn React\r\n\t\t\t\t</a>\r\n\t\t\t</header>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\r\n\t\timport('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n\t\t\tgetCLS(onPerfEntry);\r\n\t\t\tgetFID(onPerfEntry);\r\n\t\t\tgetFCP(onPerfEntry);\r\n\t\t\tgetLCP(onPerfEntry);\r\n\t\t\tgetTTFB(onPerfEntry);\r\n\t\t});\r\n\t}\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// firebase hosting setup from https://medium.com/firelayer/structuring-a-firebase-web-project-with-lerna-ab6b5ea8e1f8\r\n\r\nimport './index.css';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}